{
  "plugin_type": "loaders",
  "name": "target-bigquery",
  "namespace": "target_bigquery",
  "variant": "transferwise",
  "label": "Google BigQuery",
  "docs": "https://hub.meltano.com/loaders/target-bigquery--transferwise",
  "repo": "https://github.com/transferwise/pipelinewise-target-bigquery",
  "pip_url": "pipelinewise-target-bigquery",
  "description": "For loading data into BigQuery. This repo was transferred to the jmriego namespace.",
  "logo_url": "https://hub.meltano.com/assets/logos/loaders/bigquery.png",
  "capabilities": [
    "schema-flattening",
    "hard-delete",
    "soft-delete"
  ],
  "settings_group_validation": [
    [
      "dataset_id",
      "project_id"
    ]
  ],
  "settings": [
    {
      "name": "credentials_path",
      "env": "GOOGLE_APPLICATION_CREDENTIALS",
      "value": "$MELTANO_PROJECT_ROOT/client_secrets.json",
      "label": "Credentials Path",
      "description": "Fully qualified path to `client_secrets.json` for your service account.\n\nSee the [\"Activate the Google BigQuery API\" section of the repository's README](https://github.com/adswerve/target-bigquery#step-1-activate-the-google-bigquery-api) and <https://cloud.google.com/docs/authentication/production>.\n\nBy default, this file is expected to be at the root of your project directory.\n"
    },
    {
      "name": "dataset_id",
      "label": "Dataset Id",
      "description": "BigQuery dataset"
    },
    {
      "name": "project_id",
      "label": "Project Id",
      "description": "BigQuery project"
    },
    {
      "name": "location",
      "value": "US",
      "label": "Location",
      "description": "Region where BigQuery stores your dataset"
    },
    {
      "name": "batch_size_rows",
      "kind": "integer",
      "value": 100000,
      "label": "Batch Size Rows",
      "description": "Maximum number of rows in each batch. At the end of each batch, the rows in the batch are loaded into BigQuery."
    },
    {
      "name": "flush_all_streams",
      "kind": "boolean",
      "value": false,
      "label": "Flush All Streams",
      "description": "Flush and load every stream into BigQuery when one batch is full. Warning - This may trigger transfer of data with low number of records, and may cause performance problems."
    },
    {
      "name": "parallelism",
      "kind": "integer",
      "value": 0,
      "label": "Parallelism",
      "description": "The number of threads used to flush tables. 0 will create a thread for each stream, up to parallelism_max. -1 will create a thread for each CPU core. Any other positive number will create that number of threads, up to parallelism_max."
    },
    {
      "name": "max_parallelism",
      "kind": "integer",
      "value": 16,
      "label": "Max Parallelism",
      "description": "Max number of parallel threads to use when flushing tables."
    },
    {
      "name": "default_target_schema",
      "label": "Default Target Schema",
      "description": "Name of the schema where the tables will be created. If schema_mapping is not defined then every stream sent by the tap is loaded into this schema."
    },
    {
      "name": "default_target_schema_select_permission",
      "label": "Default Target Schema Select Permission",
      "description": "Grant USAGE privilege on newly created schemas and grant SELECT privilege on newly created"
    },
    {
      "name": "schema_mapping",
      "kind": "object",
      "label": "Schema Mapping",
      "description": "(Experimental) Useful if you want to load multiple streams from one tap to multiple BigQuery schemas. If the tap sends the stream_id in <schema_name>-<table_name> format then this option overwrites the default_target_schema value. Note, that using schema_mapping you can overwrite the default_target_schema_select_permission value to grant SELECT permissions to different groups per schemas or optionally you can create indices automatically for the replicated tables."
    },
    {
      "name": "add_metadata_columns",
      "kind": "boolean",
      "value": false,
      "label": "Add Metadata Columns",
      "description": "Metadata columns add extra row level information about data ingestions, (i.e. when was the row read in source, when was inserted or deleted in bigquery etc.) Metadata columns are creating automatically by adding extra columns to the tables with a column prefix _sdc_. The column names are following the stitch naming conventions documented at https://www.stitchdata.com/docs/data-structure/integration-schemas#sdc-columns. Enabling metadata columns will flag the deleted rows by setting the _sdc_deleted_at metadata column. Without the add_metadata_columns option the deleted rows from singer taps will not be recognisable in BigQuery."
    },
    {
      "name": "hard_delete",
      "kind": "boolean",
      "value": false,
      "label": "Hard Delete",
      "description": "When hard_delete option is true then DELETE SQL commands will be performed in BigQuery to delete rows in tables. It's achieved by continuously checking the _sdc_deleted_at metadata column sent by the singer tap. Due to deleting rows requires metadata columns, hard_delete option automatically enables the add_metadata_columns option as well."
    },
    {
      "name": "data_flattening_max_level",
      "kind": "integer",
      "value": 0,
      "label": "Data Flattening Max Level",
      "description": "Object type RECORD items from taps can be loaded into VARIANT columns as JSON (default) or we can flatten the schema by creating columns automatically. When value is 0 (default) then flattening functionality is turned off."
    },
    {
      "name": "primary_key_required",
      "kind": "boolean",
      "value": true,
      "label": "Primary Key Required",
      "description": "Log based and Incremental replications on tables with no Primary Key cause duplicates when merging UPDATE events. When set to true, stop loading data if no Primary Key is defined."
    },
    {
      "name": "validate_records",
      "kind": "boolean",
      "value": false,
      "label": "Validate Records",
      "description": "Validate every single record message to the corresponding JSON schema. This option is disabled by default and invalid RECORD messages will fail only at load time by BigQuery. Enabling this option will detect invalid records earlier but could cause performance degradation."
    },
    {
      "name": "temp_schema",
      "label": "Temp Schema",
      "description": "Name of the schema where the temporary tables will be created. Will default to the same schema as the target tables."
    }
  ]
}
